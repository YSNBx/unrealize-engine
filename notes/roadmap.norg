* Roadmap

	- (x) *Core Engine Development*
	-- (x) /Phase 1: Basic Simulation Loop/
	--- (x) Fixed timestep engine loop
	--- (x) Particle system with position, velocity, acceleration
	--- (x) Print state per frame
	--- (x) ASCII Renderer

	-- ( ) /Phase 2: 2D Pixel Renderer/
	--- (x) Create window with `pixels` and `winit`
	--- (x) Pixel rendering loop
	--- ( ) Convert world coords to screen space
	--- ( ) Color-code particles by ID/mass/type
	--- ( ) Scale & zoom support
	--- ( ) Optional: vector trails or velocity arrows

	-- ( ) /Phase 3: Entity System/
	--- ( ) Massless entities
	--- ( ) Static (immovable) entities
	--- ( ) Spring-linked particles
	--- ( ) Charge / type tags

	-- ( ) /Phase 4: Force Abstraction/
	--- ( ) Define Force trait
	--- ( ) Plug-in force system via trait objects
	--- ( ) Layer multiple forces

	-- ( ) /Phase 5: Grid + Spacetime System/
	--- ( ) 2D Grid representation
	--- ( ) Field sampling (curvature/energy)
	--- ( ) Localized interactions

	-- ( ) /Phase 6: Output + Debug/
	--- ( ) CSV logger
	--- ( ) Real-time visualization (CLI or GUI)
	--- ( ) Snapshot/save state
	--- ( ) Export force trails

	-- ( ) /Phase 7: Interactive GUI + Sandbox Editor/
	--- ( ) Visual particle placement (click-and-drag)
	--- ( ) Attribute editor (mass, velocity, etc.)
	--- ( ) Force toggles and parameter tuning
	--- ( ) Scene saving/loading
	--- ( ) Real-time graph overlays (energy, force lines)
	--- ( ) Optional: 3D engine switch (post-core completion)

	- ( ) *Force Modules*
	-- ( ) *Gravity*
	--- ( ) /Phase G1: Newtonian Gravity/
	---- (x) 2-particle simulation
	---- (x) Acceleration & integration
	---- (x) Directional force calculation
	---- (x) ASCII Renderer
	---- (x) Add 3rd+ particles (multi-body)
	---- (x) Softening to prevent infinity
	---- (-) Energy conservation

	--- (x) /Phase G2: Newtonian Gravity Energy Tracking/
	---- (x) Track kinetic energy per particle
	---- (x) Track potential energy between particle pairs
	---- (x) Print total energy per frame
	---- (x) Observe conservation or deviation

	--- ( ) /Phase G3: Collision Handling/
	---- (x) Add radius to particles
	---- (x) Detect overlap using distance vs radius
	---- (x) Apply repulsion forces (elastic collision)
	---- (-) Refine stability of elastic collision response
	---- (-) Optional: Implement soft repulsion model

	--- ( ) /Phase G4: Relativistic Approximation/
	---- ( ) Model curvature as local field
	---- ( ) Precession / time dilation (if applicable)

	-- ( ) *Electromagnetism*
	--- ( ) Positive/negative charge
	--- ( ) Lorentz force: F = q(E + v Ã— B)
	--- ( ) Particle fields (E/B as vector fields)

	-- ( ) *Quantum (Simplified QFT)*
	--- ( ) Discrete energy packets
	--- ( ) Collapse simulation (state decoherence)
	--- ( ) Probabilistic particle movement

	-- ( ) *Information Entropy*
	--- ( ) Decay forces
	--- ( ) Data-flow inspired repulsion/attraction
	--- ( ) Reversible systems test

	- ( ) *Theory Integration*
	-- ( ) Cross-reference with gravity.norg, quantum.norg, spacetime.norg
	-- ( ) Document mismatches
	-- ( ) Extract insight from divergence between code and theory
